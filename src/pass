#!/usr/bin/env bash

PASSRC=${PASSRC:-"$HOME/.passrc"}
PASS_STORE=${PASS_STORE:-"$HOME/.pass/"}

PASSWORD_STORE="$PASS_STORE/passwords/"
KEY_STORE="$PASS_STORE/keys/"
MASTER_KEY="$KEY_STORE/master.age"
PASS_KEY="$KEY_STORE/pass.age"
PASS_PUBKEY="$KEY_STORE/pass.pubkey"

ENTROPY_SALT=$(sed -n 's/^ENTROPY_SALT=//p' "$PASSRC")
ENTROPY_ITERATION=$(sed -n 's/^ENTROPY_ITERATION=//p' "$PASSRC")
ENTROPY_AMPLIFICATION=$(sed -n 's/^ENTROPY_AMPLIFICATION=//p' "$PASSRC")

NOTIFY=${NOTIFY:-$(sed -n 's/^NOTIFY=//p' "$PASSRC")}

RED="$(tput setaf 196)"
GREEN="$(tput setaf 82)"
BLUE="$(tput setaf 87)"

if ! command -v age &>/dev/null; then
  echo "age could not be found. Please install it."
  exit 1
elif ! command -v git &>/dev/null; then
  echo "git could not be found. Please install it."
  exit 1
elif ! command -v srm &>/dev/null; then
  echo "secure-delete could not be found. Please install it."
  exit 1
fi

function usage() {
  cat <<EOF
pass: A modern CLI password manager

Usage: $0 [options] <command> [arguments]

  -a [-s] <salt> [-i] <iteration>
                              Use Entropy Amplification
  -c                          Copy password to clipboard after password creation
  -d <zenity>                 Choose a dialog to get passwords
  -e                          Extra command run post clipboard cleareance
  -f                          Force. Bypass confirmation dialogs. May be destructive.
  -h, --help                  Display this help message and exit
  -i <iteration>              Define iterations for Entropy Amplification
  -n                          Enable notifications
  -p <pin>                    Antecipate PIN
  -o <pwgen-args>             Specify pwgen arguments
  -s <salt>                   Define salt for Entropy Amplification
  -z                          Don't keep private key cached

Commands:
  add, new, gen, generate [-a -f -c -p] <pass-name> <password-length>
                           Generate a new password
  close                    Remove cached private key
  cp, copy, clip [-a] <pass-name>
                           Copy password to clipboard
  custom <pass-cmd> <pin-cmd>
                           Specify a custom dialog to get master password and PIN
  find <pass-name>         Search passwords and display as a tree
  git <git-args>           Run any Git command in PASS_STORE
  import                   Import passwords from password store
  ls, list                 List all stored passwords in a tree format
  open                     Cache the private key
  out, output, stdout [-a] <pass-name>
                           Print password to stdout
  rm, remove [-f] <pass-name>
                           Remove a password entry
  rotate [-f]              Rotate all keys and update master password and PIN
  setup                    Initialize keys, directories, and git
  version                  Display the current version number

Examples:
  pass new -c MyAccount 20
                       # Create password MyAccount as a 20 long character long password,
                       # and immediately copy it to clipboard
  pass clip MyAccount  # Copy MyAccount password to clipboard
  pass list            # List all available passwords
  pass git status      # Run git status in PASS_STORE
  pass rotate -f       # Rotate all keys, without confirmation
  pass -a setup        # Setup pass using Entropy Amplification
EOF
}

function version() {
  echo "v.2.3.1"
}

function text() {
  color=$1
  text=$2
  reset=$(tput sgr0)
  echo -e "${color}${text}${reset}"
}

if [[ "$PASS_STORE" != "$HOME"* ]]; then
  text "$RED" "Danger! PASS_STORE is not located within the home directory!"
  text "$BLUE" "PASS_STORE Location: $PASS_STORE"
  text "$BLUE" "Exitting!"
  exit 1
fi

function global_error() {
  error=$?
  [[ "$error" -ne 0 ]] && {
    text "$RED" "Error: An error occurred!" >&2
    if [ "$NOTIFY" = "true" ]; then
      notify-send -u critical "Pass: Error" "An error occurred!" --expire-time=5000
    fi
    exit 1
  }
}

function pass_import() {
  local FORCE
  FORCE=${FORCE:-$(sed -n 's/^FORCE=//p' "$PASSRC")}
  if [ ! -f "$PASS_PUBKEY" ]; then
    text "$RED" "Error: Missing public age key!"
    if [ "$NOTIFY" = "true" ]; then
      notify-send -u critical "Pass: Error" "Missing public age key!" --expire-time=5000
    fi
    exit 1
  fi
  if [ "$FORCE" = "true" ]; then
    PASSWORD_STORE_DIR="$HOME/.password-store/"
  else
    PASSWORD_STORE_DIR=${PASSWORD_STORE_DIR:-$HOME/.password-store/}
  fi
  if [ ! -d "$PASS_STORE" ]; then
    text "$RED" "Error: PASS_STORE not found!"
    if [ "$NOTIFY" = "true" ]; then
      notify-send -u critical "Pass: Error" "PASS_STORE not found!" --expire-time=5000
    fi
    exit 1
  fi
  cd "$PASSWORD_STORE_DIR" || exit 1
  find . -type f -name "*.gpg" | while IFS= read -r password_file; do
    password_name=$(sed 's|^.\(.*\).gpg$|\1|' <<<"$password_file")
    password_dir=$(sed 's|^./\(.*\)/[^/]*\.gpg$|\1/|' <<<"$password_file")
    password=$(gpg --decrypt "$password_name" | head -n 1)

    if [ "$(awk -F '/' '{print $1}' <<<"$password_dir")" != "." ]; then
      mkdir -p "$PASSWORD_STORE/$password_dir"
    fi

    echo "$password" | age --encrypt --recipient="$(cat "$PASS_PUBKEY")" -o "$PASSWORD_STORE/$password_name.age"
    val=$?

    if [ $val -ne 0 ]; then
      text "$RED" "Error encrypting password: $password_name" >&2
      continue
    fi

    text "$GREEN" "Password $password_name encrypted successfully!"
  done
  git -C "$PASS_STORE" add . && git -C "$PASS_STORE" commit . -m "Imported passwords from passwordstore"

  text "$RED" "Important note: Only the first line have been copied!"
  text "$RED" "If there were multiline passwords, they are not copied."
  text "$RED" "For OTP keys, use pass-otp import"

  find "$PASS_STORE" -type f -exec chmod 600 {} \;
}

function rotate_keys() {
  local TMP_MAIN TMP_PASS TMP_PASSPUBKEY OTP_STORE RECUVA_STORE
  local new_pubkey
  OTP_STORE="$PASS_STORE/otp/"
  RECUVA_STORE="$PASS_STORE/recovery/"

  TMP_MAIN="$KEY_STORE/main-temp.age"
  TMP_PASS_ROTATE="$KEY_STORE/pass-temp.age"
  TMP_PASSPUBKEY="$KEY_STORE/pass-temp.pubkey"

  ENTROPY_SALT=${ENTROPY_SALT:-$(sed -n 's/^ENTROPY_SALT=//p' "$PASSRC")}
  ENTROPY_ITERATION=${ENTROPY_ITERATION:-$(sed -n 's/^ENTROPY_ITERATION=//p' "$PASSRC")}
  ENTROPY_AMPLIFICATION=${ENTROPY_AMPLIFICATION:-$(sed -n 's/^ENTROPY_AMPLIFICATION=//p' "$PASSRC")}

  if [ "$FORCE" = "true" ]; then
    # Backup files
    cp -r "$PASS_STORE" "$HOME/.pass.bak" && text "$BLUE" "A backup files have been create at \$HOME/.pass.bak"
  else
    text "$RED" "Are you sure you want to rotate your age keys?"
    select choice_continue in "yes" "no"; do
      case $choice_continue in
      yes) break ;;
      no) exit 0 ;;
      esac
    done
    # Backup files
    cp -r "$PASS_STORE" "$HOME/.pass.bak" && text "$BLUE" "A backup files have been create at \$HOME/.pass.bak"
  fi
  if [ ! -d "$PASSWORD_STORE" ]; then
    text "$RED" "Error: PASS_STORE not found!"
    if [ "$NOTIFY" = "true" ]; then
      notify-send -u critical "Pass: Error" "PASS_STORE not found!" --expire-time=5000
    fi
    exit 1
  fi

  get_age_key private

  age-keygen -o "$TMP_PASS_ROTATE" # Key used for passwords
  age-keygen -o "$TMP_MAIN"        # encryption layer for pass_key

  awk -F 'key: ' '{print $2}' <"$TMP_PASS_ROTATE" | tr -d '\n' >"$TMP_PASSPUBKEY"

  new_pubkey=$(awk -F 'key: ' '{print $2}' <"$TMP_PASS_ROTATE" | tr -d '\n')

  if [ "$ENTROPY_AMPLIFICATION" = "true" ]; then
    unset key
    key=$(get_age_key_amp_get pass)
  fi

  for dir in "$PASSWORD_STORE" "$OTP_STORE" "$RECUVA_STORE"; do
    if [ -d "$dir" ]; then
      find "$dir" -name "*.age" -print0 | while IFS= read -r -d $'\0' file; do
        DECRYPTED_PASSWORD="${file%.age}.txt"
        age --decrypt --identity <(echo "$key") "$file" >"$DECRYPTED_PASSWORD"
        srm "$file"
        age --encrypt --recipient="$new_pubkey" "$DECRYPTED_PASSWORD" >"$file"
        srm "$DECRYPTED_PASSWORD"
        text "$GREEN" "Encrypted $file"
      done
    fi
  done

  val=$?
  if [ "$val" -ne 0 ]; then
    for file in "$TMP_MAIN" "$TMP_PASSPUBKEY" "$TMP_PASS_ROTATE"; do
      [ -f "$file" ] && srm "$file"
    done
  fi

  key_encryption "$TMP_MAIN" "$TMP_PASS_ROTATE" "$TMP_PASSPUBKEY"

  text "$GREEN" "Complete!"
}

function key_encryption() {
  local SETUP_PASS SETUP_MASTER SETUP_PASS_TMP
  SETUP_MASTER=${1:-"$KEY_STORE/master-setup.age"}
  SETUP_PASS=${2:-"$KEY_STORE/pass-setup.age"}
  SETUP_PASS_TMP=${3:-"$KEY_STORE/pass-setup-tmp.age"}

  text "$BLUE" "Create your PIN password. It's recommended to be easier to access, but not stupid."
  text "$BLUE" "You will need to insert this PIN everytime you work with pass"

  if [ "$ENTROPY_AMPLIFICATION" = "true" ]; then
    if [ -z "$ENTROPY_ITERATION" ] || [ -z "$ENTROPY_SALT" ]; then
      text "$BLUE" "Note: You may configure your special SALT and ITERATION in your .passrc"
      text "$BLUE" "Falling back to default values"
    fi
    if [ -z "$ENTROPY_SALT" ]; then
      text "$BLUE" "Entropy Salt not set, falling back to hostname"
      ${ENTROPY_SALT:-$(hostname)}
    fi
    if [[ $(wc -m <<<"$ENTROPY_SALT") -le 10 ]]; then
      text "$RED" "Error: ENTROPY_SALT must be longer than 10 characters." >&2
      if [ "$NOTIFY" = "true" ]; then
        notify-send -u critical "Pass: Error" "ENTROPY_SALT must be longer than 10 characters!" --expire-time=5000
      fi
      exit 1
    fi
    while true; do
      text "$BLUE" "Using Entropy Amplification"
      text "$GREEN" "Insert your PIN password:"
      read -s first_password
      text "$GREEN" "Confirm your PIN password:"
      read -s second_password
      if [ "$first_password" == "$second_password" ]; then
        password="$first_password"
        break
      else
        text "$RED" "Passwords does not match"
      fi
    done
    password=$(echo "$password" | argon2 "$ENTROPY_SALT" -id -t "${ENTROPY_ITERATION:-2}" -m 20 -p 2 | awk '/^Hash:/ {print $2}')

    expect <<EOF
spawn age --passphrase -o "$PASS_KEY" "$SETUP_PASS"
expect "Enter passphrase (leave empty to autogenerate a secure one):"
send "$password\r"
expect "Confirm passphrase:"
send "$password\r"
expect eof
EOF

  else
    age --encrypt --passphrase -o "$PASS_KEY" "$SETUP_PASS"
  fi
  setup_error

  text "$BLUE" "Create your master password. It's recommended to be strong: Use numbers, characters and symbols."
  age --encrypt --passphrase -o "$MASTER_KEY" "$PASS_KEY"
  setup_error

  for file in "$SETUP_PASS" "$SETUP_MASTER" "$PASS_KEY"; do
    [ -f "$file" ] && srm "$file"
  done
}

function setup_error {
  error=$?
  [[ "$error" -ne 0 ]] && {
    echo "An error occurred!" >&2
    for file in "$SETUP_PASS" "$SETUP_MASTER" "$PASS_KEY" "$PASS_PUBKEY"; do
      [ -f "$file" ] && srm "$file"
    done
    if [ "$NOTIFY" = "true" ]; then
      notify-send -u critical "Pass: Error" "An error occurred!" --expire-time=5000
    fi
    exit 1
  }
}

function setup() {
  local SETUP_PASS SETUP_MASTER
  SETUP_MASTER="$KEY_STORE/master-setup.age"
  SETUP_PASS_TMP="$KEY_STORE/pass-setup-tmp.age"
  SETUP_PASS="$KEY_STORE/pass-setup.age"

  ENTROPY_SALT=${ENTROPY_SALT:-$(sed -n 's/^ENTROPY_SALT=//p' "$PASSRC")}
  ENTROPY_ITERATION=${ENTROPY_ITERATION:-$(sed -n 's/^ENTROPY_ITERATION=//p' "$PASSRC")}
  ENTROPY_AMPLIFICATION=${ENTROPY_AMPLIFICATION:-$(sed -n 's/^ENTROPY_AMPLIFICATION=//p' "$PASSRC")}

  if [ "$ENTROPY_AMPLIFICATION" = "true" ]; then
    if ! command -v argon2 &>/dev/null; then
      echo "argon2 could not be found. Please install it."
      exit 1
    elif ! command -v expect &>/dev/null; then
      echo "expect could not be found. Please install it."
      exit 1
    fi
  fi

  if [ -f "$MASTER_KEY" ] || [ -f "$PASS_KEY" ] || [ -f "$PASS_PUBKEY" ]; then
    text "$RED" "You already have a previous setup of pass."
    text "$RED" "Do you want to create new keys? (y/N)"
    select choice_continue in "yes" "no"; do
      case $choice_continue in
      yes)
        mv "$PASS_STORE" "$HOME/.pass.bak" && text "$BLUE" "A backup of your PASS_STORE have been created at $HOME/.pass.bak"
        break
        ;;
      no) exit 0 ;;
      esac
    done
  fi

  for file in "$MASTER_KEY" "$PASS_PUBKEY" "$PASS_KEY"; do
    [ -f "$file" ] && srm "$file"
  done

  if [ -d "$PASSWORD_STORE" ]; then
    srm -R "$PASSWORD_STORE"
  fi

  cat <<EOF
  -------------------------------------------------
  -----------------Setting pass up-----------------
  -------------------------------------------------
EOF

  echo

  text "$GREEN" "1. Creating a dedicated directory for pass and its subdirectories"
  echo "mkdir -p \$PASS_STORE \$KEY_STORE \$PASSWORD_STORE"

  mkdir -p "$PASS_STORE" "$KEY_STORE" "$PASSWORD_STORE"
  setup_error

  echo

  text "$GREEN" "2. Creating your master and pass age keys"

  age-keygen -o "$SETUP_PASS_TMP"                                             # pass.age
  awk -F 'key: ' '{print $2}' <"$SETUP_PASS_TMP" | tr -d '\n' >"$PASS_PUBKEY" # pass.age pubkey
  tail -n 1 <"$SETUP_PASS_TMP" >"$SETUP_PASS"                                 # pass.age private key
  srm "$SETUP_PASS_TMP"

  key_encryption

  echo

  text "$RED" "Important Note"
  text "$BLUE" "Your master key have been created. This master key requires your master password. You will need it to decrypt all your passwords."
  text "$BLUE" "master.age is required to decrypt pass.age, and pass.age is required to decrypt all your passwords"
  text "$RED" "Do not forget your master password and your PIN password. If you forget it you will lose access to all your passwords"

  echo

  text "$GREEN" "3. Creating your git repository"
  git -C "$PASS_STORE" init
  git -C "$PASS_STORE" add . && git -C "$PASS_STORE" commit . -m "Initial commit"

  echo

  chmod 600 "$MASTER_KEY"
  text "$GREEN" "Setup Complete"
}

function get_age_input() {
  local INPUT
  DIALOG=${DIALOG:-$(sed -n 's/^DIALOG=//p' "$PASSRC")}
  INPUT=$1
  if [ "$INPUT" == "master" ]; then
    case "$DIALOG" in
    zenity)
      passphrase=$(zenity --entry --title="Enter master password" --text="Please enter your master password:" --hide-text)
      get_age_key_amp_get master
      ;;
    custom)
      CUSTOM_CMD_PASSWORD=${CUSTOM_CMD_PASSWORD:-$(sed -n 's/^CUSTOM_CMD_PASSWORD=//p' "$PASSRC")}
      passphrase=$(sh -c "$CUSTOM_CMD_PASSWORD")
      get_age_key_amp_get master
      ;;
    *)
      read -s -p "Enter your master password:" passphrase
      get_age_key_amp_get master
      ;;
    esac
  elif [ "$INPUT" == "pin" ]; then
    if [ -z "$pin" ]; then
      case "$DIALOG" in
      zenity)
        if ! command -v zenity &>/dev/null; then
          echo "zenity could not be found. Please install it."
          exit 1
        fi
        pin=$(zenity --entry --title="Enter PIN" --text="Please enter your PIN:" --hide-text)
        ;;
      custom)
        CUSTOM_CMD_PIN=${CUSTOM_CMD_PIN:-$(sed -n 's/^CUSTOM_CMD_PASSWORD=//p' "$PASSRC")}
        pin=$(sh -c "$CUSTOM_CMD_PIN")
        ;;
      *)
        read -s -p "Enter your PIN password: " pin
        ;;
      esac
    fi
  fi
}

function get_age_key() {
  local KEY TMP_PASS
  ENTROPY_AMPLIFICATION=${ENTROPY_AMPLIFICATION:-$(sed -n 's/^ENTROPY_AMPLIFICATION=//p' "$PASSRC")}
  TMP_PASS=${TMP_PASS:-/run/user/$(id -u)/pass.age.tmp}
  KEY=$1 # expects 'private' or 'public'
  if [ "$KEY" == "public" ]; then
    key=$(cat "$PASS_PUBKEY")
    return 0
  fi
  if [ "$KEY" == "private" ]; then
    if [ ! -f "$TMP_PASS" ]; then
      touch "$TMP_PASS"
      chmod 600 "$TMP_PASS"
      get_age_input master
    fi
    global_error
    if [ "$ENTROPY_AMPLIFICATION" = "true" ]; then
      get_age_input pin
      pin=$(echo "$pin" | argon2 "${ENTROPY_SALT:-$(hostname)}" -id -t "${ENTROPY_ITERATION:-2}" -m 20 -p 2 | awk '/^Hash:/ {print $2}')
    else
      get_age_input pin
    fi
    global_error
    return 0
  fi
}

function get_age_key_amp_get() {
  local TMP_PASS MODE
  TMP_PASS=${TMP_PASS:-/run/user/$(id -u)/pass.age.tmp}
  KEEP_PASS=${KEEP_PASS:-$(sed -n 's/^KEEP_PASS=//p' "$PASSRC")}
  MODE="$1"

  if [ "$MODE" == "pass" ]; then
    key=$(
      expect <<EOF | tr -d '\r' | sed 's/\x1b\[[0-9;]*[A-Za-z]//g' | tr -d '[:space:]' | sed 's/%*$//'
spawn age --decrypt "$TMP_PASS"
expect "Enter passphrase:"
send "$pin\r"
expect eof
EOF
    )
    val=$?
    if [ "$val" -ne 0 ]; then
      text "$RED" "Error: Failed to unlock the private key!"
      if [ "$NOTIFY" = "true" ]; then
        notify-send -u critical "Pass: Error" "Failed to unlock the private key!" --expire-time=5000
      fi
      exit 1
    fi
    key=$(echo "$key" | sed 's/.*\(AGE-SECRET-KEY.*\)/\1/')
    echo -n "$key" | tr -d '[:space:]'
    if [ "$KEEP_PASS" = "true" ]; then
      srm "$TMP_PASS"
    fi
  fi

  if [ "$MODE" == "master" ]; then
    expect <<EOF
spawn age --decrypt -o "$TMP_PASS" "$MASTER_KEY"
expect "Enter passphrase:"
send "$passphrase\r"
expect eof
EOF
  fi
}

function git_passwords() {
  git -C "$PASS_STORE" "$@"
}

function open_master() {
  local STORE
  STORE=${1:-"$PASSWORD_STORE"}
  PASSWORD="$STORE/$name.age"
  get_age_key private
}

function output_password() {
  local STORE
  STORE=${1:-"$PASSWORD_STORE"}
  PASSWORD="$STORE/$name.age"
  get_age_key private
  key=$(get_age_key_amp_get pass)
  if [[ "$(basename "$0")" =~ pass$ ]]; then
    age --decrypt --identity <(echo "$key") "$PASSWORD"
    global_error
  fi
}

function close_password() {
  local TMP_PASS
  TMP_PASS=${TMP_PASS:-/run/user/$(id -u)/pass.age.tmp}
  if [ -f "$TMP_PASS" ]; then
    srm "$TMP_PASS" && text "$GREEN" "Cached private key securely wiped"
    text "$BLUE" "Your secrets are protected behind your master password"
    if [ "$NOTIFY" = "true" ]; then
      notify-send -u normal "Pass: Close" "Your secrets are protected behind your master password" --expire-time=3500
    fi
  else
    text "$BLUE" "No cached private key found"
    if [ "$NOTIFY" = "true" ]; then
      notify-send -u low "Pass: Close" "No cached private key found" --expire-time=3500
    fi
  fi
}

function fzf_passwords() {
  local STORE
  STORE=${1:-"$PASSWORD_STORE"}
  if ! command -v fzf &>/dev/null; then
    echo "fzf could not be found. Please install it."
    exit 1
  fi
  if [ -d "$STORE" ]; then
    cd "$STORE" || exit 1
    name=$(fzf --prompt "Select a password: ")
    name=$(awk -F. '{print $1}' <<<"$name" | sed 's|^.\(.*\).gpg$|\1|')
    if [ -z "$name" ]; then
      text "$RED" "No file selected"
      exit 1
    fi
  else
    text "$RED" "Error: PASS_STORE not found!"
    if [ "$NOTIFY" = "true" ]; then
      notify-send -u critical "Pass: Error" "PASS_STORE not found!" --expire-time=5000
    fi
    text "$BLUE" "Run setup first!"
  fi
}

function find_passwords() {
  local STORE
  STORE=${1:-"$PASSWORD_STORE"}
  if [ -d "$STORE" ]; then
    cd "$STORE" || exit 1
    if command -v fd &>/dev/null; then
      fd -t f -i "$name" . | tree --fromfile
    else
      find . -type f -iname "*$name*" | tree --fromfile
    fi
  else
    text "$RED" "No password store found!"
    text "$RED" "Run setup first!"
  fi
}

function list_passwords() {
  local STORE
  STORE=${1:-"$PASSWORD_STORE"}
  if [ -d "$STORE" ]; then
    if command -v eza &>/dev/null; then
      eza -T "$STORE"
    else
      tree "$STORE"
    fi
  else
    text "$RED" "No password store found!"
    text "$RED" "Run setup first!"
  fi
}

function remove_password() {
  local STORE FORCE PASS_OPERATION
  STORE=${1:-"$PASSWORD_STORE"}
  PASS_OPERATION="$2"
  FORCE=${FORCE:-$(sed -n 's/^FORCE=//p' "$PASSRC")}
  if [ "$FORCE" = "true" ]; then
    srm "$STORE"/"$name".age
    global_error
  else
    text "$RED" "Are you sure you want to remove $name? (y/N)"
    select choice_continue in "yes" "no"; do
      case $choice_continue in
      yes) break ;;
      no) exit 0 ;;
      esac
    done
    srm "$STORE"/"$name".age
    global_error
  fi
  text "$RED" "Removed $name from store"
  git -C "$PASS_STORE" add . && git -C "$PASS_STORE" commit . -m "Removed $name from store"
  if [ "$NOTIFY" = "true" ]; then
    notify-send -u normal "Pass: Delete" "Deleted $PASS_OPERATION $name" --expire-time=3500
  fi
}

function clear_clipboard() {
  if [ "$clipmethod" = "x11" ]; then
    echo "" | xclip -sel clip
  elif [ "$clipmethod" = "wayland" ]; then
    echo "" | wl-copy
  fi
  if [ -n "$POST_CLIPBOARD_CLEAR" ]; then
    sh -c "$POST_CLIPBOARD_CLEAR"
    global_error
  fi
}

function clip_password() {
  local password
  key=$(get_age_key_amp_get pass)
  password=$(age --decrypt --identity <(echo "$key") "$PASSWORD")
  val=$?
  if [ "$val" -ne 0 ]; then
    text "$RED" "Error: Failed to copy password!"
    if [ "$NOTIFY" = "true" ]; then
      notify-send -u critical "Pass: Error" "Failed to copy password!" --expire-time=5000
    fi
    exit 1
  fi
  echo "$password" | $clip_command
  echo "Clearing the password from clipboard in $CLIPBOARD_CLEAR_TIME seconds..."
  if [ "$NOTIFY" = "true" ]; then
    notify-send -u normal "Pass: Copy" "Clearing the password in $CLIPBOARD_CLEAR_TIME seconds..." --expire-time=3500
  fi
  sleep "$CLIPBOARD_CLEAR_TIME"s
  clear_clipboard
}

function copy_password() {
  local STORE PASSWORD
  STORE=${1:-"$PASSWORD_STORE"}
  PASSWORD="$STORE/$name.age"
  clipmethod="$XDG_SESSION_TYPE"
  NOTIFY=${NOTIFY:$(sed -n 's/^NOTIFY=//p' "$PASSRC")}
  CLIPBOARD_CLEAR_TIME=$(sed -n 's/^CLIPBOARD_CLEAR_TIME=//p' "$PASSRC")
  CLIPBOARD_CLEAR_TIME="${CLIPBOARD_CLEAR_TIME:-5}"

  get_age_key private

  if [ "$clipmethod" = "x11" ]; then
    clip_command="xclip -sel clip"
  elif [ "$clipmethod" = "wayland" ]; then
    clip_command="wl-copy"
  fi

  if [[ "$(basename "$0")" =~ pass$ ]]; then
    clip_password
  fi
}

function generate_password() {
  local FORCE PASSWORD PWGEN_OPT STORE
  FORCE=${FORCE:-$(sed -n 's/^FORCE=//p' "$PASSRC")}
  STORE=${1:-"$PASSWORD_STORE"}
  PASSWORD="$STORE/$name.age"
  CLIP_POST_ACTION=${CLIP_POST_ACTION:-$(sed -n 's/^ENTROPY_ITERATION=//p' "$PASSRC")}

  if [ -z "$name" ]; then
    text "$RED" "Error: No name provided for your password"
    if [ "$NOTIFY" = "true" ]; then
      notify-send -u critical "Pass: Error" "No name provided for your password!" --expire-time=5000
    fi
    exit 1
  fi

  if ! command -v pwgen &>/dev/null; then
    echo "pwgen could not be found. Please install it."
    exit 1
  fi

  function generate_error() {
    error=$?
    [[ "$error" -ne 0 ]] && {
      echo "An error occurred!" >&2
      if [ -f "$PASSWORD" ]; then
        srm "$PASSWORD"
      fi
      if [ "$NOTIFY" = "true" ]; then
        notify-send -u critical "Pass: Error" "An error occurred!" --expire-time=5000
      fi
      exit 1
    }
  }

  if [ -z "$PWGEN_OPT" ]; then
    PWGEN_OPT="-Bsncy1n"
  fi

  if [ -f "$PASSWORD" ]; then
    text "$BLUE" "This password already exists!"
    if [ "$FORCE" = "true" ]; then
      srm "$PASSWORD"
      text "$RED" "Overwritting $name"
    else
      exit 1
    fi
  fi

  get_age_key public # get pubkey

  cd "$PASSWORD_STORE" || exit 1
  mkdir -p "$(dirname "$name")"

  pwgen "$length" "$PWGEN_OPT" | age --encrypt --recipient="$key" --output="$PASSWORD" # create passwords from pass.age pubkey
  generate_error

  git -C "$PASS_STORE" add . && git -C "$PASS_STORE" commit . -m "Add generated password $name"
  chmod 600 "$PASSWORD"
  if [ "$NOTIFY" = "true" ]; then
    notify-send -u normal "Pass: Add" "Added password $name" --expire-time=3500
  fi
  if [ "$CLIP_POST_ACTION" = "true" ]; then
    copy_password
  fi
}

function get_pass_args() {
  while getopts ":hnafvezc:d:p:o:i:s:" opt; do
    case "$opt" in
    a)
      ENTROPY_AMPLIFICATION=true
      ;;
    n)
      NOTIFY=true
      ;;
    i)
      ENTROPY_ITERATION="$OPTARG"
      ;;
    e)
      POST_CLIPBOARD_CLEAR=$(sed -n 's/^POST_CLIPBOARD_CLEAR=//p' "$PASSRC")
      ;;
    s)
      ENTROPY_SALT="$OPTARG"
      ;;
    h)
      usage
      exit 0
      ;;
    f) FORCE=true ;;
    d)
      DIALOG="$OPTARG"
      ;;
    p)
      pin="$OPTARG"
      ;;
    o) PWGEN_OPT="$OPTARG" ;;
    c)
      CLIP_POST_ACTION=true
      ;;
    v)
      version
      exit 0
      ;;
    z)
      KEEP_PASS=true
      ;;
    ?)
      echo "Error: Invalid option '-$OPTARG'" >&2
      usage
      exit 0
      ;;
    esac
  done

  shift $((OPTIND - 1))

  case "$1" in
  help | usage)
    usage
    exit 0
    ;;
  setup)
    setup
    exit 0
    ;;
  output | out | stdout)
    shift
    name=$1
    if [[ -z "$name" ]]; then
      fzf_passwords
    fi
    output_password
    exit 0
    ;;
  custom-cmd)
    DIALOG="custom"
    shift
    CUSTOM_CMD_PASSWORD="$1"
    shift
    CUSTOM_CMD_PIN="$1"
    shift
    ;;
  cp | copy | clip)
    shift
    name=$1
    if [[ -z "$name" ]]; then
      fzf_passwords
    fi
    copy_password
    exit 0
    ;;
  rotate)
    rotate_keys
    exit 0
    ;;
  add | new | gen | generate)
    shift
    name="$1"
    length=${2:-72}
    generate_password
    exit 0
    ;;
  ls | list)
    list_passwords
    exit 0
    ;;
  rm | remove)
    shift
    name=$1
    if [[ -z "$name" ]]; then
      fzf_passwords
    fi
    remove_password "$PASSWORD_STORE" password
    exit 0
    ;;
  git)
    shift
    args=("$@")
    git_passwords "${args[@]}"
    exit 0
    ;;
  find)
    shift
    name=$1
    find_passwords
    exit 0
    ;;
  open)
    shift
    open_master
    ;;
  close)
    close_password
    exit 0
    ;;
  version)
    version
    exit 0
    ;;
  import)
    pass_import
    exit 0
    ;;
  *)
    text "$RED" "Error: Invalid command $1" >&2
    usage
    exit 0
    ;;
  esac
}

if [[ "$(basename "$0")" =~ pass$ ]]; then
  get_pass_args "$@"
fi
