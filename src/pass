#!/usr/bin/env bash

## Main Directory

PASS_STORE=${PASS_STORE:-"$HOME/.pass/"}

## Password Directories

OTP_STORE=${OTP_STORE:-"$PASS_STORE/otp/"}
PASSWORD_STORE=${PASSWORD_STORE:-"$PASS_STORE/passwords/"}
RCV_STORE=${RCV_STORE:-"$PASS_STORE/rcv/"}

## Age Key Directory

KEY_STORE=${KEY_STORE:-"$PASS_STORE/keys/"}

## Age Keys

MAIN_KEY=${MAIN_KEY:-"$KEY_STORE/main.age"}
PASS_KEY=${PASS_KEY:-"$KEY_STORE/pass.age"}

## Temporary Directory to store main.age

TMP_KEY=/run/user/"$(id -u)"/passkey.tmp

## Echo Coloring

RED="$(tput setaf 196)"
GREEN="$(tput setaf 82)"
BLUE="$(tput setaf 87)"

## Enable confirmation by default

FORCE=false

# TODO: Review this when done
function usage() {
  cat <<EOF
Pass: Password Manager
Usage: $0 [option] [command]
Available options:
-f, --force                                - Lifts confirmation dialogs
-s, --store [pass/otp/rcv]                 - Choose a store
-h, --help                                 - Displays this message and exits
Available commands:
copy [name]                                - Copy password to clipboard
edit [name]                                - Edit an existing password
new, generate [name] [length]              - Generate a new password
rm, remove [name] -s                       - Remove password from store
setup                                      - Setup keys, directories and git
EOF
}

# Echo Coloring
function text() {
  local color text reset
  color=$1
  text=$2
  reset=$(tput sgr0)
  echo -e "${color}${text}${reset}"
}

function error_check() {
  error=$?
  [[ "$error" -ne 0 ]] && {
    echo "An error occurred!" >&2
    exit 1
  }
}

# TODO: Renew age keys
function init() {
  echo "WIP"
}

# Setup directories, gpg and age keys, and git repository
function setup() {
  if ! command -v age &>/dev/null; then
    echo "age could not be found. Please install it."
    exit 1
  elif ! command -v git &>/dev/null; then
    echo "git could not be found. Please install it."
    exit 1
  fi
  text "$GREEN" "Setting up"
  text "$GREEN" "1. Creating a dedicated directory for pass and its subdirectories"
  mkdir -p "$PASS_STORE" "$KEY_STORE" "$OTP_STORE" "$PASSWORD_STORE"
  error_check

  text "$GREEN" "2. Creating your main and pass age keys"
  age-keygen -o "$KEY_STORE/temp_pass" # Key used for passwords
  age-keygen -o "$KEY_STORE/temp_main" # encryption layer for pass_key
  key=$(awk -F 'key: ' '{print $2}' <"$KEY_STORE/temp_main" | tr -d '\n')
  age --encrypt --recipient="$key" -o "$PASS_KEY" "$KEY_STORE/temp_pass"
  error_check
  age --encrypt --passphrase -o "$MAIN_KEY" "$KEY_STORE/temp_main"
  error_check
  shred -u "$KEY_STORE/temp_main" "$KEY_STORE/temp_pass"

  text "$BLUE" "Two keys have been created: main.age and pass.age"
  text "$BLUE" "You will need both to access your accounts. And both are encrypted by default."
  text "$BLUE" "main.age is required to decrypt pass.age, and pass.age is required to decrypt all your passwords"
  text "$BLUE" "You can decrypt main.age with the password you just set"
  text "$RED" "Do not forget your password. If you forget it you will loose access to all your passwords"

  text "$GREEN" "3. Creating your git repository"
  git -C "$PASS_STORE" init
  git -C "$PASS_STORE" add . && git -C "$PASS_STORE" commit . -m "Initial commit"

  text "$GREEN" "Setup Complete"
}

# Decrypt main.age to get age pubkey
function get_age_pub_key() {
  if [ ! -f "$TMP_KEY" ]; then
    touch "$TMP_KEY"
    chmod 600 "$TMP_KEY"

    age --decrypt "$MAIN_KEY" >"$TMP_KEY"
    error_check

    pubkey=$(age --decrypt --identity="$TMP_KEY" "$PASS_KEY" | awk -F 'key: ' '{print $2}' | tr -d '\n')
  else
    pubkey=$(awk -F 'key: ' '{print $2}' <"$TMP_KEY" | tr -d '\n')
  fi
  error_check
  echo "$pubkey"
}

# List directories using eza or tree
function list_passwords() {
  if [ -d "$PASS_STORE" ]; then
    if command -v eza &>/dev/null; then
      eza -T "$PASS_STORE"
    else
      tree "$PASS_STORE"
    fi
  else
    echo "No password store found!"
    echo "Run setup first!"
  fi
}

# Generate passwords, with optional length choice
function generate_password() {
  if [ -f "$name" ]; then
    echo "This password already exists!"
    exit 1
  fi
  key=$(get_age_pub_key)

  cd "$STORE" || exit 1
  mkdir -p "$name"

  pwgen "$length" -Bsncy1n | age --encrypt --recipient="$key" --output="$STORE/$name.age"
  error_check
  git -C "$PASS_STORE" add . && git -C "$PASS_STORE" commit . -m "Add generated password for $name"
}

# Indicate which store should be worked on
function set_store() {
  if [ -z "$store" ]; then
    store="pass"
  fi
  case "$store" in
  pass)
    STORE=$PASSWORD_STORE/$name
    message="password"
    ;;
  otp)
    STORE=$OTP_STORE/$name
    message="otp"
    ;;
  rcv)
    STORE=$RCV_STORE/$name
    message="recovery key"
    ;;
  esac
}

# Remove password from store
function remove_password() {
  if [ "$FORCE" = "true" ]; then
    shred -u "$STORE".age
    echo "Remove $name $message from store"
  else
    text "$RED" "Are you sure you want to remove $name? (y/N)"
    select choice_continue in "yes" "no"; do
      case $choice_continue in
      yes) break ;;
      no) exit 0 ;;
      esac
    done
    shred -u "$STORE".age
    echo "Remove $name $message from store"
  fi
  error_check
  git -C "$PASS_STORE" add . && git -C "$PASS_STORE" commit . -m "Remove $name $message from store"
}

# Edit password
function edit_password() {
  key=$(get_age_pub_key)
  new_password=$(age --decrypt --identity="$key" "$STORE"/"$name".age | nano)
  error_check
  age --encrypt --recipient="$key" "$new_password" >"$STORE"/"$name".age
  error_check
  git -C "$PASS_STORE" add . && git -C "$PASS_STORE" commit . -m "Edit $name $message"
}

# Clears clipboard
function clear_clipboard() {
  if [ "$clipmethod" = "x11" ]; then
    echo "" | xclip -sel clip
  elif [ "$clipmethod" = "wayland" ]; then
    echo "" | wl-copy
  fi
  extra_clear
}

function extra_clear() {
  # Extra command to be executed after clipboard is cleared
  # Example: PASS_CLEAR="cliphist wipe"
  pass_clear=$(sed -n 's/clear: //p' <"$PASSRC")
  if [ -n "$pass_clear" ]; then
    "$(pass_clear)"
  fi
}

function config_file() {
  PASSRC=${PASSRC:-"$HOME/.passrc"}
}

# Copy password to clipboard
function copy_password() {
  clipmethod="$XDG_SESSION_TYPE"
  key=$(get_age_pub_key)
  if [ "$clipmethod" = "x11" ]; then
    age --decrypt --identity="$key" "$STORE"/"$name".age | xclip -sel clip
  elif [ "$clipmethod" = "wayland" ]; then
    age --decrypt --identity="$key" "$STORE"/"$name".age | wl-copy
  fi
  error_check
  echo "Clearing the password from clipboard in 5 seconds..."
  sleep 5s
  clear_clipboard
}

config_file # Read config file

while getopts ":hfk:s:" opt; do
  case "$opt" in
  h) usage ;;
  f) FORCE=true ;;
  s) store="$OPTARG" ;;
  ?)
    echo "Error: Invalid option '-$OPTARG'" >&2
    usage
    ;;
  esac
done

shift $((OPTIND - 1))

case "$1" in
usage) usage ;;
setup)
  setup
  exit 0
  ;;
init)
  init
  exit 0
  ;;
new | generate)
  shift
  name="$1"
  length=${2:-72}
  set_store
  generate_password
  exit 0
  ;;
edit)
  shift
  name=$1
  key=$2
  set_store
  edit_password
  exit 0
  ;;
copy)
  shift
  name=$1
  key=$2
  set_store
  copy_password
  exit 0
  ;;
list)
  list_passwords
  exit 0
  ;;
rm | remove)
  shift
  name=$1
  set_store
  remove_password
  exit 0
  ;;
esac
