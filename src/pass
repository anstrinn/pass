#!/usr/bin/env bash

# Envs

PASSRC=${PASSRC:-"$HOME/.passrc"}
PASS_STORE=${PASS_STORE:-"$HOME/.pass/"}

# Global Variables

PASSWORD_STORE=${PASSWORD_STORE:-"$PASS_STORE/passwords/"}
KEY_STORE=${KEY_STORE:-"$PASS_STORE/keys/"}
MAIN_KEY=${MAIN_KEY:-"$KEY_STORE/main.age"}
PASS_KEY=${PASS_KEY:-"$KEY_STORE/pass.age"}
TMP_MAIN_KEY=/run/user/"$(id -u)"/mainkey.tmp
TMP_PASS_KEY=/run/user/"$(id -u)"/passkey.tmp
RED="$(tput setaf 196)"
GREEN="$(tput setaf 82)"
BLUE="$(tput setaf 87)"
FORCE=false

function usage() {
  cat <<EOF
Pass: Password Manager
Usage: $0 [option] [command]
Available options:
-h, --help, usage                          - Displays this message and exists
-f, --force                                - Lifts confirmation dialogs
Available commands:
cp, copy [name]                            - Copy password to clipboard
edit [name]                                - Edit an existing password
reset                                      - Re-encrypts all passwords
find                                       - Find files
ls, list                                   - List all passwords in a tree format
new, generate [name] [length] -f           - Generate a new password
rm, remove [name] -f                       - Remove password from store
setup                                      - Setup keys, directories and git
EOF
}

function text() {
  local color text reset
  color=$1
  text=$2
  reset=$(tput sgr0)
  echo -e "${color}${text}${reset}"
}

function error_check() {
  error=$?
  [[ "$error" -ne 0 ]] && {
    echo "An error occurred!" >&2
    exit 1
  }
}

function reset() {
  # Backup files
  cp -r "$PASS_STORE" "$HOME/.pass.bak"
  init_decrypt # Decrypt all passwords
  init_encrypt # Re-encrypt all passwords with new keys and password
}

function init_decrypt() {
  local MAIN_DECRYPTED PASS_DECRYPTED
  MAIN_DECRYPTED="$KEY_STORE/main-decrypted.age"
  PASS_DECRYPTED="$KEY_STORE/pass-decrypted.age"
  # Decrypt Main Key
  age --decrypt -o "$MAIN_DECRYPTED" "$MAIN_KEY"
  error_check
  # Decrypt Pass Key
  age --decrypt --identity="$MAIN_DECRYPTED" -o "$PASS_DECRYPTED" "$PASS_KEY"
  error_check
  if [ -d "$PASSWORD_STORE" ]; then
    # Decrypt all passwords
    find "$PASSWORD_STORE" -name "*.age" -print0 | xargs -0 -I {} sh -c "
        DECRYPTED_PASSWORD=\"\${1%.age}.txt\"
        age --decrypt --identity=\"$PASS_DECRYPTED\" \"\$1\" > \"\$DECRYPTED_PASSWORD\"
      " _ {}
  fi
  error_check
  # Wipe all .age passwords
  find "$PASSWORD_STORE" -name "*.age" -print0 | xargs -0 shred -u
  shred -u "$MAIN_DECRYPTED" "$PASS_DECRYPTED"
}

function init_encrypt() {
  age-keygen -o "$KEY_STORE/temp_pass" # Key used for passwords
  age-keygen -o "$KEY_STORE/temp_main" # encryption layer for pass_key
  key=$(awk -F 'key: ' '{print $2}' <"$KEY_STORE/temp_main" | tr -d '\n')
  age --encrypt --recipient="$key" -o "$PASS_KEY" "$KEY_STORE/temp_pass"
  error_check
  age --encrypt --passphrase -o "$MAIN_KEY" "$KEY_STORE/temp_main"
  val=$?
  if [ "$val" -ne 0 ]; then
    echo "An error occurred!" >&2
    shred -u "$KEY_STORE/temp_main" "$KEY_STORE/temp_pass" "$PASS_KEY"
    exit 1
  fi
  local pubkey=$(awk -F 'key: ' '{print $2}' <"$KEY_STORE/temp_pass" | tr -d '\n')
  # Encrypt all passwords
  find "$PASSWORD_STORE" -name "*.txt" -print0 | xargs -0 -I {} sh -c "
      ENCRYPTED_PASSWORD=\"\${1%.txt}.age\"
      age --encrypt --recipient=\"$pubkey\" \"\$1\" > \"\$ENCRYPTED_PASSWORD\"
      rm -f \"\$1\"
    " _ {}
  shred -u "$KEY_STORE/temp_main" "$KEY_STORE/temp_pass"
  text "$GREEN" "All passwords have been re-encrypted with new keys!"
}

# Setup directories, gpg and age keys, and git repository
function setup() {
  if ! command -v age &>/dev/null; then
    echo "age could not be found. Please install it."
    exit 1
  elif ! command -v git &>/dev/null; then
    echo "git could not be found. Please install it."
    exit 1
  fi
  if [ -f "$TMP_MAIN_KEY" ]; then
    shred -u "$TMP_MAIN_KEY"
  fi
  text "$GREEN" "Setting up"
  text "$GREEN" "1. Creating a dedicated directory for pass and its subdirectories"
  mkdir -p "$PASS_STORE" "$KEY_STORE" "$PASSWORD_STORE"
  error_check
  echo
  text "$GREEN" "2. Creating your main and pass age keys"
  age-keygen -o "$KEY_STORE/temp_pass" # Key used for passwords
  age-keygen -o "$KEY_STORE/temp_main" # encryption layer for pass_key
  key=$(awk -F 'key: ' '{print $2}' <"$KEY_STORE/temp_main" | tr -d '\n')
  age --encrypt --recipient="$key" -o "$PASS_KEY" "$KEY_STORE/temp_pass"
  error_check
  age --encrypt --passphrase -o "$MAIN_KEY" "$KEY_STORE/temp_main"
  val=$?
  if [ "$val" -ne 0 ]; then
    echo "An error occurred!" >&2
    shred -u "$KEY_STORE/temp_main" "$KEY_STORE/temp_pass" "$PASS_KEY"
    exit 1
  fi
  shred -u "$KEY_STORE/temp_main" "$KEY_STORE/temp_pass"
  echo
  text "$BLUE" "Two keys have been created: main.age and pass.age"
  text "$BLUE" "You will need both to access your accounts. And both are encrypted by default."
  text "$BLUE" "main.age is required to decrypt pass.age, and pass.age is required to decrypt all your passwords"
  text "$BLUE" "You can decrypt main.age with the password you just set"
  text "$RED" "Do not forget your password. If you forget it you will loose access to all your passwords"
  echo
  text "$GREEN" "3. Creating your git repository"
  git -C "$PASS_STORE" init
  git -C "$PASS_STORE" add . && git -C "$PASS_STORE" commit . -m "Initial commit"
  echo
  text "$GREEN" "Setup Complete"
}

# Decrypt main.age to get age pubkey
function get_age_pub_key() {
  local private
  private=$1 # expects 'true'
  if [ ! -f "$TMP_MAIN_KEY" ]; then
    touch "$TMP_MAIN_KEY"
    chmod 600 "$TMP_MAIN_KEY"
    age --decrypt "$MAIN_KEY" >"$TMP_MAIN_KEY" # use main.age and create a tmp file
    error_check
  fi
  # use main.age tmp file privatekey to get pass.age public key
  pubkey=$(age --decrypt --identity="$TMP_MAIN_KEY" "$PASS_KEY" | awk -F 'key: ' '{print $2}' | tr -d '\n')
  error_check
  if [ "$private" = "true" ]; then
    # use main.age tmp file and create a pass.age tmp file (shorter lived than main.age tmp file)
    age --decrypt --identity="$TMP_MAIN_KEY" -o "$TMP_PASS_KEY" "$PASS_KEY"
  fi
  error_check
}

# List directories using eza or tree
function list_passwords() {
  if [ -d "$PASS_STORE" ]; then
    if command -v eza &>/dev/null; then
      eza -T "$PASS_STORE"
    else
      tree "$PASS_STORE"
    fi
  else
    echo "No password store found!"
    echo "Run setup first!"
  fi
}

function find_passwords() {
  if [ -d "$PASS_STORE" ]; then
    if command -v fd &>/dev/null; then
      fd -t f -i "$name" "$PASS_STORE"
    else
      find "$PASS_STORE" -type f -iname "*$name*"
    fi
  else
    echo "No password store found!"
    echo "Run setup first!"
  fi
}

# Generate passwords, with optional length choice
function generate_password() {
  if [ -f "$PASSWORD_STORE/$name" ]; then
    echo "This password already exists!"
    if [ "$FORCE" = "true" ]; then
      shred -u "$PASSWORD_STORE"/"$name"/.age
      echo "Removed $name from store"
    else
      exit 1
    fi
  fi
  get_age_pub_key # get pubkey

  cd "$PASSWORD_STORE" || exit 1
  mkdir -p "$(dirname "$name")"

  pwgen "$length" -Bsncy1n | age --encrypt --recipient="$pubkey" --output="$PASSWORD_STORE/$name.age" # create passwords from pass.age pubkey
  error_check
  git -C "$PASS_STORE" add . && git -C "$PASS_STORE" commit . -m "Add generated password for $name"
}

# Remove password from store
function remove_password() {
  if [ "$FORCE" = "true" ]; then
    shred -u "$PASSWORD_STORE".age
    echo "Remove $name $message from store"
  else
    text "$RED" "Are you sure you want to remove $name? (y/N)"
    select choice_continue in "yes" "no"; do
      case $choice_continue in
      yes) break ;;
      no) exit 0 ;;
      esac
    done
    shred -u "$PASSWORD_STORE".age
    echo "Remove $name $message from store"
  fi
  error_check
  git -C "$PASS_STORE" add . && git -C "$PASS_STORE" commit . -m "Remove $name $message from store"
}

# Edit password
function edit_password() {
  local tmp_file="$PASSWORD_STORE/$name.tmp"
  local decrypted_file="$(mktemp)"

  get_age_pub_key true # get pubkey and create pass.age tmp file

  if [ -f "$tmp_file" ]; then
    mv "$tmp_file" "$PASSWORD_STORE/$name.age"
  fi

  mv "$PASSWORD_STORE/$name.age" "$tmp_file" # safeguard original password
  # use pass.age tmp file to decrypt password to modify it later
  age --decrypt --identity="$TMP_PASS_KEY" "$tmp_file" >"$decrypted_file" || {
    mv "$tmp_file" "$PASSWORD_STORE/$name.age"
    shred -u "$TMP_PASS_KEY" "$decrypted_file"
    echo "An error occurred!" >&2
    return 1
  }

  nano "$decrypted_file"

  # use pass.age pubkey to create our new password
  age --encrypt --recipient="$pubkey" -o "$PASSWORD_STORE/$name.age" "$decrypted_file" || {
    mv "$tmp_file" "$PASSWORD_STORE/$name.age"
    rm -f "$decrypted_file"
    echo "An error occurred!" >&2
    return 1
  }

  # clear all tmp files
  shred -u "$TMP_PASS_KEY" "$tmp_file" "$decrypted_file"

  git -C "$PASS_STORE" add "$PASSWORD_STORE/$name.age" &&
    git -C "$PASS_STORE" commit -m "Edit $name"
}

# Clears clipboard
function clear_clipboard() {
  if [ "$clipmethod" = "x11" ]; then
    echo "" | xclip -sel clip
  elif [ "$clipmethod" = "wayland" ]; then
    echo "" | wl-copy
  fi
  if command -v cliphist &>/dev/null; then
    cliphist wipe
    exit 1
  fi
}

# Copy password to clipboard
function copy_password() {
  local password_file="$PASSWORD_STORE/$name.age"
  local decrypted_file="$(mktemp)"
  local clipmethod="$XDG_SESSION_TYPE"

  get_age_pub_key true # get pubkey and create pass.age tmp file

  if [ "$clipmethod" = "x11" ]; then
    age --decrypt --identity="$TMP_PASS_KEY" "$password_file" | xclip -sel clip
  elif [ "$clipmethod" = "wayland" ]; then
    age --decrypt --identity="$TMP_PASS_KEY" "$password_file" | wl-copy
  fi
  val=$?
  if [ "$val" -ne 0 ]; then
    shred -u "$TMP_PASS_KEY"
    echo "An error occurred!" >&2
    return 1
  fi
  shred -u "$TMP_PASS_KEY"

  # clear all tmp files
  echo "Clearing the password from clipboard in 5 seconds..."
  sleep 5s
  clear_clipboard
}

while getopts ":hfk:s:" opt; do
  case "$opt" in
  h) usage ;;
  f) FORCE=true ;;
  ?)
    echo "Error: Invalid option '-$OPTARG'" >&2
    usage
    ;;
  esac
done

shift $((OPTIND - 1))

case "$1" in
-h | --help | usage)
  usage
  exit 0
  ;;
setup)
  setup
  exit 0
  ;;
reset)
  init
  exit 0
  ;;
new | generate)
  shift
  name="$1"
  length=${2:-72}
  generate_password
  exit 0
  ;;
edit)
  shift
  name=$1
  edit_password
  exit 0
  ;;
cp | copy)
  shift
  name=$1
  copy_password
  exit 0
  ;;
ls | list)
  list_passwords
  exit 0
  ;;
rm | remove)
  shift
  name=$1
  remove_password
  exit 0
  ;;
find)
  shift
  name=$1
  find_passwords
  exit 0
  ;;
esac
